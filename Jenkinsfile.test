// Define variables
def _python_version="3.7.6"
def _user="appuser"
def _home="/home/" + _user

pipeline {
    parameters {
        booleanParam defaultValue: true, description: 'Push RPMs to Nexus3 yum repo?', name: 'Push'
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        NEXUS_USER = credentials('nexus_username')
        NEXUS_PASS = credentials('nexus_password')
    }
    agent {
        docker { 
            image 'lsstts/robotsal:python376'
            args '-w ' + _home + ' -e AWS_ACCESS_KEY_ID=$aws_key_id -e AWS_SECRET_ACCESS_KEY=$aws_secret_key ' + 
            '-e NEXUS_USER=$nexus_username -e NEXUS_PASS=$nexus_passwd ' +
            '-v ${WORKSPACE}/SAL:' + _home + '/trunk/ts_sal -v ${WORKSPACE}/rbtsalgen:' + _home + '/trunk/robotframework_salgenerator ' +
            '-v ${WORKSPACE}/RPMs:/tmp -v ${WORKSPACE}/Reports:' + _home + '/Reports'
         }
    }
    stages {
        stage('Print Variables') {
            steps {
                println("The container user: " + _user);
                println("The container home dir: " + _home);
            }
        }//Variables
        stage('Pull Git repos') {
            steps {
                // Get some code from a GitHub repository
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SAL']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_sal']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'XML']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_xml']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'IDL']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_idl']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'rbtsalgen']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/robotframework_salgenerator']]]
            }
        }//Git repos
        stage('Define SAL and XML version variables') {
            steps {
                script {
                    SAL_Version = readFile("${WORKSPACE}/SAL/VERSION").trim()
                    XML_Version = readFile("${WORKSPACE}/XML/VERSION").trim()
                    if ("${GIT_BRANCH}" == 'master') {
                        // Maven release artifacts simply use the version numbers.
                        MavenVersion = ''
                    } else {
                        // Maven develop/daily/etc artifacts add the -SNAPSHOT string.
                        MavenVersion = '-SNAPSHOT'
                    }
                }
                echo "The Branch Name: ${GIT_BRANCH}"
                echo "The SAL version: " + SAL_Version
                echo "The XML version: " + XML_Version
                echo "The Maven version: " + MavenVersion
            }
        }//Define SAL & XML variables
        stage('Copy XML files') {
            steps {
                // Move XML definition files to the SAL working directory.
                sh label: 'XML files', script: '#!/bin/bash -x\n' + 'cp -v ${WORKSPACE}/XML/sal_interfaces/*/*.xml SAL/test'
                sh label: 'SAL Subsystems', script: '#!/bin/bash -x \n' + 'cp -v ${WORKSPACE}/XML/sal_interfaces/SALSubsystems.xml SAL/test'
                sh label: 'SAL Generics', script: '#!/bin/bash -x \n' + 'cp -v ${WORKSPACE}/XML/sal_interfaces/SALGenerics.xml SAL/test'
                sh label: 'XML Version', script: '#!/bin/bash -x \n' + 'cp -v ${WORKSPACE}/XML/VERSION SAL/test'
                sh label: 'DDS QoS settings', script: '#!/bin/bash -x \n' + 'cp -v ${WORKSPACE}/SAL/lsstsal/scripts/DDS_DefaultQoS_All.xml SAL/test'
            }
        }//Copy XML
        stage('Install IDL and XML python libraries') {
            steps {
                sh label: 'IDL library', script: '#!/bin/bash -x \n' + 'cd IDL && pip install --user .'
                sh label: 'XML library', script: '#!/bin/bash -x \n' + 'cd XML && pip install --user .'
            }
        }//IDL & XML
        stage('Validate') {
            steps {
                // Validate the SAL/XML state using Test/Script CSCs
                sh label: 'Validate', script: '#!/bin/bash -x \n' + 'source ' + _home + '/.bash_profile \n' +
                'echo ========= Move to robotframework_salgenerator directory ========= \n' +
                'echo cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                'cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                'pwd \n' +
                'robot --variable ContInt:true -e skipped --noncritical TSS* --noncritical DM* --variable SALVersion:' + SAL_Version + ' ' +
                    '--variable SALInstall:' + _home + '/trunk/ts_sal --variable OpenspliceRelease:\'OpenSplice HDE Release\' ' + 
                    '--variable OpenspliceVersion:6.9.181127OSS --variable OpenspliceDate:2018-11-28 --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                    '--variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version + ' --variable Build_Number:_${BUILD_NUMBER} ' + 
                    '--name Validate --output VALIDATE --outputdir ' + _home + '/Reports -A ' + _home + '/trunk/robotframework_salgenerator/Test_SalGen.list \n' +
                'if [ $? == 0 ]; then echo Validation complete; else exit $?; fi'
            }
        }//Validate
        stage('Generate the RPMs') {
            parallel {
               stage('AuxTel') {
                    steps {
                        // Generate the AuxTel CSC RPMs
                        sh label: 'AuxTel', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_salgenerator directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                        'cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                        'pwd \n' +
                        'echo ========= Execute AuxTel salgenerator tests ========= \n' +
                        'robot --variable ContInt:true -e skipped --noncritical TSS* --noncritical DM* --variable SALVersion:' + SAL_Version + ' ' +
                            '--variable SALInstall:' + _home + '/trunk/ts_sal --variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:6.9.181127OSS --variable OpenspliceDate:2018-11-28 --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '--variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version + ' --variable Build_Number:_${BUILD_NUMBER} ' +
                            '--name AuxTel --output AUXTEL --outputdir ' + _home + '/Reports -A ' + _home + '/trunk/robotframework_salgenerator/AT_SalGen.list \n' +
                        'if [ $? == 0 ]; then echo AuxTel generation complete; else exit $?; fi'
                    }
                }//AuxTel
                stage('MainTel') {
                    steps {
                        // Generate the MainTel CSC RPMs
                        sh label: 'MainTel', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_salgenerator directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                        'cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                        'pwd \n' +
                        'echo ========= Execute MainTel salgenerator tests ========= \n' +
                        'robot --variable ContInt:true -e skipped --noncritical TSS* --noncritical DM* --variable SALVersion:' + SAL_Version + ' ' +
                            '--variable SALInstall:' + _home + '/trunk/ts_sal --variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:6.9.181127OSS --variable OpenspliceDate:2018-11-28 --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '--variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version + ' --variable Build_Number:_${BUILD_NUMBER} ' +
                            '--name MainTel --output MAINTEL --outputdir ' + _home + '/Reports -A ' + _home + '/trunk/robotframework_salgenerator/MT_SalGen.list \n' +
                        'if [ $? == 0 ]; then echo MainTel generation complete; else exit $?; fi'
                    }
                }//MainTel
            }//parallel
        }//Generate_RPMs
        stage('Run C++ Messaging Tests') {
            parallel {
                stage('CppTelemetry') {
                    steps {
                        sh label: 'CppTelemetry', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'echo ========= Execute SAL messaging tests ========= \n' +
                        'robot --outputdir ' + _home + '/Reports --variable ContInt:true -e skipped --noncritical TSS* --noncritical DM* ' +
                            '--variable SALVersion:' + SAL_Version + ' --variable SALInstall:' + _home + '/trunk/ts_sal ' +
                            '--variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:6.9.181127OSS --variable OpenspliceDate:2018-11-28 ' +
                            '--variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version + ' --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '-A ' + _home + '/trunk/robotframework_SAL/CombinedCppTelemetry_Tests.list \n' +
                        'exit 0'
                    }
                }//CppTelemetry
                stage('CppEvents') {
                    steps {
                        sh label: 'CppEvents', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'echo Start \n' +
                        'robot --outputdir ' + _home + '/Reports --variable ContInt:true -e skipped --noncritical TSS* --noncritical DM* ' +
                            '--variable SALVersion:' + SAL_Version + ' --variable SALInstall:' + _home + '/trunk/ts_sal ' +
                            '--variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:6.9.181127OSS --variable OpenspliceDate:2018-11-28 ' +
                            '--variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version + ' --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '-A ' + _home + '/trunk/robotframework_SAL/CombinedCppEvents_Tests.list \n' +
                        'exit 0'
                    }
                }//CppEvents
            }//parallel
        }//RunCppMessagingTests
        stage('Process Results') {
            steps {
                sh label: 'Results', script: '#!/bin/bash -x \n' + 'echo "# Check for output files."\n' +
                'declare -a outputs=(VALIDATE.xml AUXTEL.xml MAINTEL.xml CombinedCppTelemetry.xml CombinedCppEvents.xml CombinedJavaTelemetry.xml)\n' + 
                'echo ${outputs[@]}\n' +
                'i=0\n echo i=$i\n' + 'for item in "${outputs[@]}"; do\n' +
                '\tif test -f ' + _home + '/Reports/$item; then array[$i]=' + _home + '/Reports/$item; else echo ' +
                    _home + '/Reports/$item does not exist!; fi\n' +
                '\t(( i++ ))\n' + 'done\n' +
                'echo ========= Generate the reports =========\n' +
                'rebot --nostatusrc --noncritical TSS* --noncritical DM* --outputdir ' + _home + '/Reports --name RPM_Generation -o rpm_output.xml -l rpm_log.html ' +
                '-r rpm_report.html ${array[@]} \n' +
                'echo Robot results complete'
            }
        }//Robot Results
    }//stages
    post { 
        always {
            robot outputPath: 'Reports', logFileName: 'rpm_log.html', outputFileName: 'rpm_output.xml', reportFileName: 'rpm_report.html', passThreshold: 100.0, unstableThreshold: 95.0
        }
        success {
            build job: 'linked_job', parameters: [string(name: 'TEST', value: 'TRIGGERED')], wait: false
        }
    }
}//pipeline
