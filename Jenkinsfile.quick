// Define variables
def _python_version="3.8.8"
def _mvn_version="3.6.3"
def _ospl_version="6.11.0"
def _ospl_date="2021-03-04"
def _user="appuser"
def _home="/home/" + _user

pipeline {
    parameters {
        string defaultValue: params.SAL_BRANCH ?:'develop', description: 'The branch of ts_sal to test.', name: 'SAL_BRANCH', trim: true
        string defaultValue: params.XML_BRANCH ?:'develop', description: 'The branch of ts_xml to test.', name: 'XML_BRANCH', trim: true
        string defaultValue: params.IDL_BRANCH ?:'master', description: 'The branch of ts_idl to test.', name: 'IDL_BRANCH', trim: true
        string defaultValue: params.DDSCONFIG_BRANCH ?:'master', description: 'The branch of ts_ddsconfig to test.', name: 'DDSCONFIG_BRANCH', trim: true
        string defaultValue: params.SALGEN_BRANCH ?:'develop', description: 'The branch of robotframework_salgenerator to test.', name: 'SALGEN_BRANCH', trim: true
        string defaultValue: params.SALMSG_BRANCH ?:'develop', description: 'The branch of robotframework_SAL to test.', name: 'SALMSG_BRANCH', trim: true
        booleanParam defaultValue: params.Generate ?:false, description: 'Run the "salgenerator generate" tests?', name: 'Generate'
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        OSPL_URI = "file:///opt/OpenSpliceDDS/V${_ospl_version}/HDE/x86_64.linux/etc/config/ospl_sp_ddsi.xml"
        DDS_QOS = "file://${_home}/trunk/ts_ddsconfig/qos/QoS.xml"
    }
    agent {
        docker { 
            image 'ts-dockerhub.lsst.org/robotsal:latest'
            args '-w ' + _home + ' -e AWS_ACCESS_KEY_ID=$aws_key_id -e AWS_SECRET_ACCESS_KEY=$aws_secret_key ' + 
            '-e NEXUS_USER=$nexus_user -e NEXUS_PASS=$nexus_pass -e OSPL_URI=$ospl_uri -e DDS_QOS=$dds_qos ' +
            '-e LSST_DDS_PARTITION_PREFIX=citest -v ${WORKSPACE}:' + _home + '/trunk'
            label 'Node1_4CPU'
         }
    }
    stages {
        stage('Pull Git repos') {
            steps {
                echo "The SAL Branch: " + SAL_BRANCH
                echo "The XML Branch: " + XML_BRANCH
                echo "The IDL Branch: " + IDL_BRANCH
                echo "The DDSCONFIG Branch: " + DDSCONFIG_BRANCH
                echo "The RFSALGEN Branch: " + SALGEN_BRANCH
                echo "The RFSALMSGs Branch: " + SALMSG_BRANCH
                // Checkout the SAL, XML, IDL, DDSCONFIG and Salgenerator and SAL Messaging test repos.
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: SAL_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ts_sal']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_sal']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: XML_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ts_xml']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_xml']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: IDL_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ts_idl']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_idl']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: DDSCONFIG_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ts_ddsconfig']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_ddsconfig']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: SALGEN_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'robotframework_salgenerator']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/robotframework_salgenerator']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: SALMSG_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'robotframework_SAL']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/robotframework_SAL']]]
            }
        }//Git repos
        stage('Setup: Define variables and create directories') {
            steps {
                println("The container user: " + _user);
                println("The container home dir: " + _home);
                println("The Python version: " + _python_version);
                script {
                    SAL_Version = readFile("${WORKSPACE}/ts_sal/VERSION").trim()
                    XML_Version = readFile("${WORKSPACE}/ts_xml/VERSION").trim()
                    if ( params.SAL_BRANCH == 'master') {
                        // Maven and RPM release artifacts simply use the version numbers.
                        MavenVersion = ''
                        Build_Param = ''
                        RPM_Version = XML_Version + "-" + SAL_Version
                    } else {
                        // Maven develop/daily/etc artifacts add the -SNAPSHOT string.
                        MavenVersion = '-SNAPSHOT'
                        // RPM develop/daily/etc artifacts add 'pre' and the Build Number string.
                        Build_Param = "pre${BUILD_NUMBER}"
                        RPM_Version = XML_Version + "-" + SAL_Version + "." + Build_Param
                    }
                }
                sh 'mkdir -pv "${WORKSPACE}/Reports"'
                sh 'mkdir -pv ' + _home + '/trunk/Reports'
                echo "The Branch Name: ${GIT_BRANCH}"
                echo "The SAL version: " + SAL_Version
                echo "The XML version: " + XML_Version
                echo "The Maven version: " + MavenVersion
                echo "The RPM Version: " + RPM_Version 
            }
        }//Define SAL & XML variables
        stage('Copy XML files') {
            steps {
                // Move XML definition files to the SAL working directory.
                sh label: 'XML files', script: '#!/bin/bash \n' + 'cp -v ${WORKSPACE}/ts_xml/sal_interfaces/*/*.xml ts_sal/test'
                sh label: 'SAL Subsystems', script: '#!/bin/bash \n' + 'cp -v ${WORKSPACE}/ts_xml/sal_interfaces/SALSubsystems.xml ts_sal/test'
                sh label: 'SAL Generics', script: '#!/bin/bash \n' + 'cp -v ${WORKSPACE}/ts_xml/sal_interfaces/SALGenerics.xml ts_sal/test'
                sh label: 'XML Version', script: '#!/bin/bash \n' + 'cp -v ${WORKSPACE}/ts_xml/VERSION ts_sal/test'
            }
        }//Copy XML
        stage('Install IDL and XML python libraries') {
            steps {
                sh label: 'IDL library', script: '#!/bin/bash -x \n' + 'cd ts_idl && pip install --user .'
                sh label: 'XML library', script: '#!/bin/bash -x \n' + 'cd ts_xml && pip install --user .'
            }
        }//IDL & XML
        stage('Validate') {
            steps {
                script {
                    if ( params.Generate ) {
                        script_test_path = _home + '/trunk/robotframework_salgenerator/GENERATE/Script_Generate.robot'
                        test_test_path = _home + '/trunk/robotframework_salgenerator/GENERATE/Test_Generate.robot'
                    } else {
                        script_test_path = _home + '/trunk/robotframework_salgenerator/SALGEN/Script_salgenerator.robot'
                        test_test_path = _home + '/trunk/robotframework_salgenerator/SALGEN/Test_salgenerator.robot'
                    }
                }
                echo "Script test suite: " + script_test_path
                echo "Test test suite: " + test_test_path
                // Validate the SAL/XML state using Test/Script CSCs
                sh label: 'Validate', script: '#!/bin/bash -x \n' + 'source ' + _home + '/.bash_profile \n' +
                'echo OSPL_URI: $OSPL_URI \n' +
                'echo DDS_QOS: $DDS_QOS \n' +
                'echo ========= Move to robotframework_salgenerator directory ========= \n' +
                'echo cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                'cd ' + _home + '/trunk/robotframework_salgenerator \n' +
                'pwd \n' +
                'robot --variable ContInt:true -e skipped --skiponfailure TSS* --skiponfailure DM* --variable SALVersion:' + SAL_Version + ' ' +
                    '--variable SALInstall:' + _home + '/trunk/ts_sal --variable OpenspliceRelease:\'OpenSplice HDE Release\' ' + 
                    '--variable OpenspliceVersion:' + _ospl_version + ' --variable OpenspliceDate:' + _ospl_date + 
                    ' --variable MvnVersion:"Apache Maven ' + _mvn_version + '" --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                    '--variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version + ' --variable Build_Number:' + Build_Param + ' ' + 
                    '--name Validate --output VALIDATE --outputdir ' + _home + '/trunk/Reports ' + _home + '/trunk/robotframework_salgenerator/SAL_Tests.robot ' +
                    script_test_path + ' ' + test_test_path + ' ' + _home + '/trunk/robotframework_salgenerator/SAL_Unit_Tests.robot \n' +
                'Result=$? \n' +
                'if [ $Result -eq 0 ]; then echo Validation complete; else exit $Result; fi'
            }
        }//Validate
        stage('Run C++ Messaging Tests') {
            when {
                not {
                    expression {
                        return params.Generate
                    }
                }
            }
            parallel {
                stage('CppTelemetry') {
                    steps {
                        sh label: 'CppTelemetry', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'echo ========= Execute SAL messaging tests ========= \n' +
                        'robot --outputdir ' + _home + '/trunk/Reports --variable ContInt:true -e skipped --skiponfailure TSS* --skiponfailure DM* ' +
                            '--variable SALVersion:' + SAL_Version + ' --variable SALInstall:' + _home + '/trunk/ts_sal ' +
                            '--variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:' + _ospl_version + ' --variable OpenspliceDate:' + _ospl_date + 
                            ' --variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version + 
                            ' --variable MvnVersion:"Apache Maven ' + _mvn_version + '" --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '--name CombinedCppTelemetry --output CombinedCppTelemetry ' +
                            _home + '/trunk/robotframework_SAL/Combined/CPP/Telemetry/Test_Telemetry.robot \n' +
                        'exit 0'
                    }
                }//CppTelemetry
                stage('CppEvents') {
                    steps {
                        sh label: 'CppEvents', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'echo Start \n' +
                        'robot --outputdir ' + _home + '/trunk/Reports --variable ContInt:true -e skipped --skiponfailure TSS* --skiponfailure DM* ' +
                            '--variable SALVersion:' + SAL_Version + ' --variable SALInstall:' + _home + '/trunk/ts_sal ' +
                            '--variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:' + _ospl_version + ' --variable OpenspliceDate:' + _ospl_date +
                            ' --variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version +
                            ' --variable MvnVersion:"Apache Maven ' + _mvn_version + '" --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '--name CombinedCppEvents --output CombinedCppEvents ' +
                            _home + '/trunk/robotframework_SAL/Combined/CPP/Events/Script_Events.robot ' +
                            _home + '/trunk/robotframework_SAL/Combined/CPP/Events/Test_Events.robot \n' +
                        'exit 0'
                    }
                }//CppEvents
            }//parallel
        }//RunCppMessagingTests
        stage('Run Java Messaging Tests') {
            when {
                not {
                    expression {
                        return params.Generate
                    }
                }
            }
            parallel {
                stage('JavaTelemetry') {
                    steps {
                        sh label: 'JavaTelemetry', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'echo ========= Execute SAL Java messaging tests ========= \n' +
                        'robot --outputdir ' + _home + '/trunk/Reports --variable ContInt:true -e skipped --skiponfailure TSS* --skiponfailure DM* ' +
                            '--variable SALVersion:' + SAL_Version + ' --variable SALInstall:' + _home + '/trunk/ts_sal ' +
                            '--variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:' + _ospl_version + ' --variable OpenspliceDate:' + _ospl_date +
                            ' --variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version +
                            ' --variable Build_Number:' + Build_Param + 
                            ' --variable MvnVersion:"Apache Maven ' + _mvn_version + '" --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '--name CombinedJavaTelemetry --output CombinedJavaTelemetry ' +
                            _home + '/trunk/robotframework_SAL/Combined/JAVA/Telemetry/Test_Telemetry.robot \n' +
                        'exit 0'
                    }
                }//JavaTelemetry
                stage('JavaEvents') {
                    steps {
                        sh label: 'JavaEvents', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'cd ' + _home + '/trunk/robotframework_SAL \n' +
                        'echo ========= Execute SAL messaging tests ========= \n' +
                        'robot --outputdir ' + _home + '/trunk/Reports --variable ContInt:true -e skipped --skiponfailure TSS* --skiponfailure DM* ' +
                            '--variable SALVersion:' + SAL_Version + ' --variable SALInstall:' + _home + '/trunk/ts_sal ' +
                            '--variable OpenspliceRelease:\'OpenSplice HDE Release\' ' +
                            '--variable OpenspliceVersion:' + _ospl_version + ' --variable OpenspliceDate:' + _ospl_date +
                            ' --variable MavenVersion:' + MavenVersion + ' --variable XMLVersion:' + XML_Version +
                            ' --variable Build_Number:' + Build_Param + 
                            ' --variable MvnVersion:"Apache Maven ' + _mvn_version + '" --variable PythonVersion:\'Python ' + _python_version + '\' ' +
                            '--name CombinedJavaEvents --output CombinedJavaEvents ' +
                            _home + '/trunk/robotframework_SAL/Combined/JAVA/Events/Test_Events.robot \n' +
                        'exit 0'
                    }
                }//JavaEvents
            }//parallel
        }//RunJavaMessagingTests
    }//stages
    post { 
        always {
            //Process Robot-Framework results.
            sh label: 'Results', script: '#!/bin/bash \n' + 'echo "# Check for output files."\n' +
            'declare -a outputs=(VALIDATE.xml CombinedCppTelemetry.xml CombinedCppEvents.xml CombinedJavaTelemetry.xml CombinedJavaEvents.xml)\n' + 
            'echo ${outputs[@]}\n' +
            'i=0\n echo i=$i\n' + 'for item in "${outputs[@]}"; do\n' +
            '\tif test -f ' + _home + '/trunk/Reports/$item; then array[$i]=' + _home + '/trunk/Reports/$item; else echo ' +
                _home + '/trunk/Reports/$item does not exist!; fi\n' +
            '\t(( i++ ))\n' + 'done\n' +
            'echo ========= Generate the reports =========\n' + 'set -x \n' +
            'rebot --nostatusrc --removekeywords wuks ' + 
                '--outputdir ' + _home + '/trunk/Reports --name SAL_Test_Quick -o rpm_output.xml -l rpm_log.html ' +
                '-r rpm_report.html ${array[@]} \n' +
            'echo Processing Robot-Framework results complete'
            //Publish results to Jenkins.
            robot outputPath: 'Reports', logFileName: 'rpm_log.html', outputFileName: 'rpm_output.xml', reportFileName: 'rpm_report.html', passThreshold: 99.5, unstableThreshold: 99.0
            //Email Notification
            step([$class: 'Mailer',
                notifyEveryUnstableBuild: false,
                recipients: "rbovill@lsst.org dmills@lsst.org",
                sendToIndividuals: true])
        }
    }//post
}//pipeline
