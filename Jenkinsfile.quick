@Library('JenkinsShared') _
// Define variables
def _user="saluser"
def _home="/home/" + _user

pipeline {
    parameters {
        string defaultValue: 'sal', description: 'The Kafka subname to register.', name: 'SUBNAME', trim: true
        booleanParam defaultValue: '', description: 'Must be TRUE if deleting the \'sal\' topic subname.', name: 'FORCE'
        string defaultValue: 'develop', description: 'The branch of ts_sal to test.', name: 'SAL_BRANCH', trim: true
        string defaultValue: 'develop', description: 'The branch of ts_xml to test.', name: 'XML_BRANCH', trim: true
        string defaultValue: 'develop', description: 'The branch of lsst-camera-ccs/org-lsst-camera-simple-sal to test.', name: 'SIMPLESAL_BRANCH', trim: true
        string defaultValue: '${BRANCH_NAME}', description: 'The branch of robotframework_salgenerator to test.', name: 'SALGEN_BRANCH', trim: true
        string defaultValue: 'develop', description: 'The branch of robotframework_SAL to test.', name: 'SALMSG_BRANCH', trim: true
        booleanParam defaultValue: params.Generate ?:false, description: 'Run the "salgenerator generate" tests?', name: 'Generate'
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        LSST_TOPIC_SUBNAME = "${SUBNAME}"
    }
    options {
        disableConcurrentBuilds()
    }
    agent {
        docker { 
            image 'ts-dockerhub.lsst.org/robotsal:latest'
            args '--network=kafka -w ' + _home + 
            ' -e AWS_ACCESS_KEY_ID=$aws_key_id -e AWS_SECRET_ACCESS_KEY=$aws_secret_key ' + 
            '-v ${WORKSPACE}:' + _home + '/repos'
            label 'Node1_4CPU || Node3_4CPU'
         }
    }
    stages {
        stage('Pull Git repos') {
            steps {
                echo "The SAL Branch: " + SAL_BRANCH
                echo "The XML Branch: " + XML_BRANCH
                echo "The SIMPLESAL Branch: " + SIMPLESAL_BRANCH
                echo "The RFSALGEN Branch: " + SALGEN_BRANCH
                echo "The RFSALMSGs Branch: " + SALMSG_BRANCH
                // Checkout the SAL, XML, and Salgenerator and SAL Messaging test repos.
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: SAL_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ts_sal']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_sal']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: XML_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ts_xml']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/ts_xml']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: SALGEN_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'robotframework_salgenerator']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/robotframework_salgenerator']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: SALMSG_BRANCH]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'robotframework_SAL']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/lsst-ts/robotframework_SAL']]]
                checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: SIMPLESAL_BRANCH]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'simple_sal']], userRemoteConfigs: [[credentialsId: '14e4c262-1fb1-4b73-b395-5fe617420c85', url: 'https://github.com/lsst-camera-ccs/org-lsst-camera-simple-sal.git']]]
            }
        }//Git repos
        stage('Setup: Define variables and create directories') {
            steps {
                println("The container user: " + _user);
                println("The container home dir: " + _home);
                script {
                    SAL_Version = sh(returnStdout: true, script: "cd /home/saluser/repos/ts_sal && git describe |sed s/v//g").trim()
                    XML_Version = sh(returnStdout: true, script: "cd /home/saluser/repos/ts_xml && git describe |sed s/v//g").trim()
                    SAL_Version_Base = sh(returnStdout: true, script: "echo " + SAL_Version + " |cut -d '-' -f1 |sed s/v//g").trim()
                    XML_Version_Base = sh(returnStdout: true, script: "echo " + XML_Version + " |cut -d '-' -f1 |sed s/v//g").trim()
                    SAL_Version_RC = sh(returnStdout: true, script: "echo " + SAL_Version + " |cut -d '-' -f1,2 |sed s/v//g").trim()
                    XML_Version_RC = sh(returnStdout: true, script: "echo " + XML_Version + " |cut -d '-' -f1,2 |sed s/v//g").trim()

                    if (params.SAL_BRANCH == 'main' || params.XML_BRANCH == 'main') {
                        println("This is a RELEASE build.")
                        // Maven and RPM release artifacts simply use the version numbers.
                        MavenVersion = ''
                        Build_Param = ''
                        RPM_Version = XML_Version_Base + "-" + SAL_Version_Base
                    } else if (SAL_Version_RC.contains('rc')) {
                        println("This is a SAL RELEASE CANDIDATE build.")
                        // Maven and RPM release candidate artifacts simply use the version numbers.
                        MavenVersion = ''
                        Build_Param = ''
                        RPM_Version = XML_Version_Base + "-" + SAL_Version_RC
                    } else if (XML_Version_RC.contains('rc')) {
                        println("This is an XML RELEASE CANDIDATE build.")
                        // Maven and RPM release candidate artifacts simply use the version numbers.
                        MavenVersion = ''
                        Build_Param = ''
                        RPM_Version = XML_Version_RC + "-" + SAL_Version_Base
                    } else {
                        println("This is a daily build.")
                        // Maven develop/daily/etc artifacts add the -SNAPSHOT string.
                        MavenVersion = '-SNAPSHOT'
                        // RPM develop/daily/etc artifacts add 'pre' and the Build Number string.
                        Build_Param = "post${BUILD_NUMBER}"
                        RPM_Version = XML_Version_Base + "~" + Build_Param + "-" + SAL_Version_Base
                    }
                }
                sh 'mkdir -pv "${WORKSPACE}/Reports"'
                sh 'mkdir -pv ' + _home + '/repos/Reports'
                echo "The Branch Name: ${GIT_BRANCH}"
                echo "The SAL version: " + SAL_Version
                echo "The SAL base version: " + SAL_Version_Base
                echo "The SAL RC version: " + SAL_Version_RC
                echo "The XML version: " + XML_Version
                echo "The XML base version: " + XML_Version_Base
                echo "The XML RC version: " + XML_Version_RC
                echo "The Maven version: " + MavenVersion
                echo "The RPM Version: " + RPM_Version 
            }
        }//Define SAL & XML variables
        stage('Copy XML files') {
            steps {
                // Move XML definition files to the SAL working directory.
                sh label: 'XML files', script: '#!/bin/bash \n' + 'cp -v ${WORKSPACE}/ts_xml/python/lsst/ts/xml/data/sal_interfaces/*/*.xml ts_sal/test'
                sh label: 'SAL Subsystems', script: '#!/bin/bash \n' + 'cp -v ${WORKSPACE}/ts_xml/python/lsst/ts/xml/data/sal_interfaces/SALSubsystems.xml ts_sal/test'
                sh label: 'SAL Generics', script: '#!/bin/bash \n' + 'cp -v ${WORKSPACE}/ts_xml/python/lsst/ts/xml/data/sal_interfaces/SALGenerics.xml ts_sal/test'
            }
        }//Copy XML
        stage('Install XML python library') {
            steps {
                sh label: 'XML library', script: '#!/bin/bash -x \n' + 'cd ts_xml && pip3.12 install -e . --ignore-installed --no-deps'
            }
        }//XML
        stage('Validate') {
            steps {
                script {
                    if ( params.Generate ) {
                        test_test_path = _home + '/repos/robotframework_salgenerator/GENERATE/Test_Generate.robot'
                    } else {
                        test_test_path = _home + '/repos/robotframework_salgenerator/SALGEN/Test_salgeneratorKafka.robot'
                    }
                }
                echo "Test test suite: " + test_test_path
                // Validate the SAL/XML state using Test CSC
                sh label: 'Validate', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                'echo TS_SAL_DIR: $TS_SAL_DIR \n' +
                'echo TS_XML_DIR: $TS_XML_DIR \n' +
                'echo ========= Move to robotframework_salgenerator directory ========= \n' +
                'echo cd ' + _home + '/repos/robotframework_salgenerator \n' +
                'cd ' + _home + '/repos/robotframework_salgenerator \n' +
                'pwd \n' +
                'robot --variable ContInt:true -e skipped --skiponfailure TSS* --skiponfailure DM* --loglevel TRACE:INFO' +
                    ' --variable SALVersion:' + SAL_Version + ' --variable SALVersionBase:' + SAL_Version_Base +
                    ' --variable XMLVersion:' + XML_Version + ' --variable XMLVersionBase:' + XML_Version_Base + 
                    ' --variable SALInstall:' + _home + '/repos/ts_sal --variable XMLHome:' + _home + '/repos/ts_xml' +
                    ' --variable MavenVersion:' + MavenVersion + ' --variable Build_Number:' + Build_Param + ' ' + 
                    '--name Validate --output VALIDATE --outputdir ' + _home + '/repos/Reports ' + 
                    _home + '/repos/robotframework_salgenerator/Verify_SAL_Setup.robot ' + test_test_path + '\n' +
                'Result=$? \n' +
                'if [ $Result -eq 0 ]; then echo Validation complete; else exit $Result; fi'
            }
        }//Validate
        stage('Register Kafka Topics') {
            when {
                not {
                    expression {
                        return params.Generate
                    }
                }
            }
            steps {
                script {
                    Exec_Branch = "Register_Kafka_Topics/" + SALGEN_BRANCH.replace("*/", "").replace("/", "%2F")
                    echo "XMLVersion: ${XML_Version_Base}"
                    echo "SUBNAME: $LSST_TOPIC_SUBNAME"
                    echo "The exec branch: " + Exec_Branch
                    echo "The build node: " + env.NODE_NAME
                    registerKafkaTopics "${XML_Version_Base}"
                }
            }
        }//Register
        stage('Run simple-sal tests') {
            when {
                not {
                    expression {
                        return params.Generate
                    }
                }
            }
            steps {
                sh label: 'Simple-SAL', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to simple-sal directory ========= \n' +
                        'echo cd ' + _home + '/repos/simple_sal  \n' +
                        'cd ' + _home + '/repos/simple_sal \n' +
                        'echo ========= Execute simple-sal tests ========= \n' +
                        'mvn --no-transfer-progress -B clean install'
            }
        }//simple-sal
        stage('Run C++ Messaging Tests') {
            when {
                not {
                    expression {
                        return params.Generate
                    }
                }
            }
            parallel {
                stage('CppTelemetry') {
                    steps {
                        sh label: 'CppTelemetry', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/repos/robotframework_SAL \n' +
                        'cd ' + _home + '/repos/robotframework_SAL \n' +
                        'echo ========= Execute SAL messaging tests ========= \n' +
                        'robot --variable ContInt:true -e skipped --skiponfailure DM* --loglevel TRACE:INFO' +
                            ' --variable SALVersion:' + SAL_Version + ' --variable XMLVersion:' + XML_Version +
                            ' --variable SALInstall:' + _home + '/repos/ts_sal --variable XMLHome:' + _home + '/repos/ts_xml ' +
                            ' --variable MavenVersion:' + MavenVersion + ' --variable Build_Number:' + Build_Param +
                            ' --outputdir ' + _home + '/repos/Reports --name CombinedCppTelemetry --output CombinedCppTelemetry ' +
                            _home + '/repos/robotframework_SAL/Combined/CPP/Telemetry/Test_Telemetry.robot \n' +
                        'exit 0'
                    }
                }//CppTelemetry
                stage('CppEvents') {
                    steps {
                        sh label: 'CppEvents', script: '#!/bin/bash \n' + 'source ' + _home + '/.bash_profile \n' + 'set -x \n' +
                        'echo ========= Move to robotframework_SAL directory ========= \n' +
                        'echo cd ' + _home + '/repos/robotframework_SAL \n' +
                        'cd ' + _home + '/repos/robotframework_SAL \n' +
                        'echo Start \n' +
                        'robot --variable ContInt:true -e skipped --skiponfailure DM* --loglevel TRACE:INFO' +
                            ' --variable SALVersion:' + SAL_Version + ' --variable XMLVersion:' + XML_Version +
                            ' --variable SALInstall:' + _home + '/repos/ts_sal --variable XMLHome:' + _home + '/repos/ts_xml ' +
                            ' --variable MavenVersion:' + MavenVersion + ' --variable Build_Number:' + Build_Param +
                            ' --outputdir ' + _home + '/repos/Reports --name CombinedCppEvents --output CombinedCppEvents ' +
                            _home + '/repos/robotframework_SAL/Combined/CPP/Events/Test_Events.robot \n' +
                        'exit 0'
                    }
                }//CppEvents
            }//parallel
        }//RunCppMessagingTests
        stage('Delete Kafka Topics') {
            when {
                not {
                    expression {
                        return params.Generate
                    }
                }
            }
            steps {
                script {
                    Exec_Branch = "Delete_Kafka_Topics/" + RFSALGEN_Checkout.replace("*/", "").replace("/", "%2F")
                    echo "XMLVersion: ${XML_Version_Base}"
                    echo "SUBNAME: ${SUBNAME}"
                    echo "The exec branch: " + Exec_Branch
                    echo "The build node: " + env.NODE_NAME
                    deleteKafkaTopics ${XML_Version_Base}, params.SUBNAME, params.FORCE
                }
            }
        }//DeleteTopics
    }//stages
    post { 
        always {
            //Process Robot-Framework results.
            sh label: 'Results', script: '#!/bin/bash \n' + 'echo "# Check for output files."\n' +
            'declare -a outputs=(VALIDATE.xml CombinedCppTelemetry.xml CombinedCppEvents.xml CombinedJavaTelemetry.xml CombinedJavaEvents.xml )\n' + 
            'echo ${outputs[@]}\n' +
            'i=0\n echo i=$i\n' + 'for item in "${outputs[@]}"; do\n' +
            '\tif test -f ' + _home + '/repos/Reports/$item; then array[$i]=' + _home + '/repos/Reports/$item; else echo ' +
                _home + '/repos/Reports/$item does not exist!; fi\n' +
            '\t(( i++ ))\n' + 'done\n' +
            'echo ========= Generate the reports =========\n' + 'set -x \n' +
            'rebot --nostatusrc --removekeywords wuks ' + 
                '--outputdir ' + _home + '/repos/Reports --name SAL_Test_Quick -o rpm_output.xml -l rpm_log.html ' +
                '-r rpm_report.html ${array[@]} \n' +
            'echo Processing Robot-Framework results complete'
            //Publish results to Jenkins.
            robot enableCache: false, outputPath: 'Reports', outputFileName: 'rpm_output.xml', reportFileName: 'rpm_report.html', logFileName: 'rpm_log.html', passThreshold: 99.0, unstableThreshold: 95.0
            //Email Notification
            step([$class: 'Mailer',
                notifyEveryUnstableBuild: false,
                recipients: "rbovill@lsst.org",
                sendToIndividuals: true])
        }
        success {
            cleanWs cleanWhenAborted: false, cleanWhenFailure: false, cleanWhenUnstable: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true
        }
    }//post
}//pipeline
